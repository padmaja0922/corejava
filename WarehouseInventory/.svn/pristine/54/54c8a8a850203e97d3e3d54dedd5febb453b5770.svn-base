/**
 * 
 */
package com.bcj.manageInventory;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * @author Boot Camp User 008
 *
 */
public class InventorTranscations {

	static Map<String, FoodItem> food = new HashMap<String, FoodItem>();
	static Map<String, Inventory> inv = new HashMap<String, Inventory>();

	public static void main(String[] args) throws ParseException {

		Scanner scan = new Scanner(System.in);
		System.out.println("Enter the name of the file : ");
		String fileName = scan.next();
		Date startDate = null;
		Date nextDate = null;
		
		try {

			BufferedReader inputFile = new BufferedReader(new FileReader(fileName));

			String lineOfText = inputFile.readLine();

			while (lineOfText != null) {

				if (('F' == lineOfText.charAt(0)) || ('W' == lineOfText.charAt(0))) {
					String str[] = lineOfText.split("-");
					saveKey(str);

				} else if ('S' == lineOfText.charAt(0)) {
					String str[] = lineOfText.split(":");
					for(int i =0 ;i<str.length;i++)
						str[i]=str[i].trim();
					
				startDate =(Date) new SimpleDateFormat("MM/dd/yyyy").parse(str[1]);  
				
				} else if ('N' == lineOfText.charAt(0)) {
					String str[] = lineOfText.split(":");
					nextDate= (Date) new SimpleDateFormat("dd/MM/yyyy").parse(str[1]);  
					

				} else {
					String str[] = lineOfText.split(":");
					for(int i =0;i<str.length;i++)
					 str[i]=str[i].trim();
					saveReceive(str,startDate);
				}

				lineOfText = inputFile.readLine();

				if(lineOfText.equals("End"))
					break;
				
			}

			inputFile.close();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			scan.close();
		}

	}

	/**
	 * @param str
	 * @param startDate 
	 */
	private static void saveReceive(String[] str, Date startDate) {

		String[] receive = str[1].split("  ");
		for(int i=0;i<receive.length;i++)
			receive[i].trim();
		
		FoodItem fItem = new FoodItem();
		Inventory inventory = new Inventory();
		
		if ("Request".equals(str[0])){
			
			inventory =  (Inventory)inv.get(receive[2]);
		      	inventory.setQuantity( inventory.getQuantity()-(Integer.parseInt(receive[1])));
		    inv.put(receive[2],inventory);
		}
			
	
		if ("Receive".equals(str[0].trim())) {
			
			
			if (inv.containsKey(receive[2])) {
				if (receive[0].equals(inv.get(inventory.getUpcCode())))
					inv.get((inventory.getQuantity()) + (Integer.parseInt(receive[1])));        
				

			else {
                  int days =0;
				inventory.setUpcCode(receive[0]);
				inventory.setQuantity(Integer.parseInt(receive[1]));
					 
				if (food.containsKey(inventory.getUpcCode())){
				
					 fItem = (FoodItem)food.get(receive[0]);
      					 days = fItem.getShelfLife();
					 
					}
				GregorianCalendar cal = new GregorianCalendar();
				cal.setTime(startDate);
				
			      cal.add(Calendar.DATE, days);
				
				
				inventory.setExpDate( (Date) cal.getTime());
				inv.put(receive[2], inventory);
			}
			}
		}
		System.out.println(inv);
	}

	

	/**
	 * @param lineOfText
	 */
	private static void saveKey(String[] str) {

		String item[] = str[1].split(":");

		if ("FoodItem".equals(str[0].trim())) {
			FoodItem fitem = new FoodItem();

			if ("Shelf life".equals(item[2].trim()))
				fitem.setShelfLife(Integer.parseInt(item[3].trim()));
			if ("Name".equals(item[4].trim()))
				fitem.setName(item[5]);
			food.put(item[1].trim(), fitem);
			

		} else {
			inv.put(str[1].trim(), null);
		
		}
	}

}
